{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { useEffect, useState } from \"react\";\r\nexport const Pagination = ({ currentPage, pageSize = 4, totalPages, onChangePage, firstButton = true, lastButton = true, }) => {\r\n    const [pages, setPages] = useState([]);\r\n    useEffect(() => {\r\n        let newPages = [];\r\n        let fromIndex, toIndex;\r\n        const halfSize = Math.floor(pageSize / 2);\r\n        if (totalPages > pageSize) {\r\n            if (currentPage < totalPages - halfSize &&\r\n                currentPage !== 1 &&\r\n                currentPage > halfSize) {\r\n                if (pageSize % 2 === 0) {\r\n                    const nextPage = currentPage + 1 >= pages[pageSize - 1];\r\n                    const previousPage = currentPage < pages[1];\r\n                    if (nextPage) {\r\n                        fromIndex = currentPage - halfSize;\r\n                        toIndex = currentPage + halfSize - 1;\r\n                    }\r\n                    if (previousPage) {\r\n                        fromIndex = currentPage - halfSize + 1;\r\n                        toIndex = currentPage + halfSize;\r\n                    }\r\n                }\r\n                else {\r\n                    fromIndex = currentPage - halfSize;\r\n                    toIndex = currentPage + halfSize;\r\n                }\r\n            }\r\n            if (currentPage === 1 || currentPage <= halfSize) {\r\n                fromIndex = 1;\r\n                toIndex = pageSize;\r\n            }\r\n            if (currentPage >= totalPages - halfSize || currentPage === totalPages) {\r\n                fromIndex = totalPages - pageSize + 1;\r\n                toIndex = totalPages;\r\n            }\r\n        }\r\n        else {\r\n            fromIndex = 1;\r\n            toIndex = totalPages;\r\n        }\r\n        function loopPaging() {\r\n            for (let i = fromIndex; i <= toIndex; i++) {\r\n                newPages.push(i);\r\n            }\r\n        }\r\n        loopPaging();\r\n        setPages(newPages);\r\n    }, [totalPages, currentPage, pageSize]);\r\n    return (_jsxs(\"ul\", Object.assign({ className: \"pagination\" }, { children: [firstButton && (_jsx(\"li\", Object.assign({ className: `page-item previous ${currentPage === 1 ? \"disabled\" : \"\"}` }, { children: _jsxs(\"button\", Object.assign({ className: \"page-link\", onClick: () => onChangePage(1) }, { children: [_jsx(\"i\", { className: \"previous\" }), _jsx(\"i\", { className: \"previous\", style: { marginLeft: \"-0.5rem\" } })] })) }))), _jsx(\"li\", Object.assign({ className: `page-item previous ${currentPage === 1 ? \"disabled\" : \"\"}` }, { children: _jsx(\"button\", Object.assign({ className: \"page-link\", onClick: () => onChangePage(currentPage - 1) }, { children: _jsx(\"i\", { className: \"previous\" }) })) })), pages.map((i) => (_jsx(\"li\", Object.assign({ className: `page-item ${currentPage === i ? \"active\" : \"\"}` }, { children: _jsx(\"button\", Object.assign({ className: \"page-link\", onClick: () => {\r\n                        if (currentPage !== i)\r\n                            onChangePage(i);\r\n                    } }, { children: i })) }), i))), _jsx(\"li\", Object.assign({ className: `page-item next ${currentPage === totalPages ? \"disabled\" : \"\"}` }, { children: _jsx(\"button\", Object.assign({ className: \"page-link\", onClick: () => onChangePage(currentPage + 1) }, { children: _jsx(\"i\", { className: \"next\" }) })) })), lastButton && (_jsx(\"li\", Object.assign({ className: `page-item next ${currentPage === totalPages ? \"disabled\" : \"\"}` }, { children: _jsxs(\"button\", Object.assign({ className: \"page-link\", onClick: () => onChangePage(totalPages) }, { children: [_jsx(\"i\", { className: \"next\" }), _jsx(\"i\", { className: \"next\", style: { marginLeft: \"-0.5rem\" } })] })) })))] })));\r\n};\r\n","references":["/Users/binh.nt/Desktop/source/react-rollup/node_modules/@types/react/index.d.ts"],"dts":{"name":"/Users/binh.nt/Desktop/source/react-rollup/dist/types/components/pagination/pagination.d.ts","writeByteOrderMark":false,"text":"export declare const Pagination: ({ currentPage, pageSize, totalPages, onChangePage, firstButton, lastButton, }: {\r\n    currentPage: number;\r\n    pageSize?: number | undefined;\r\n    totalPages: number;\r\n    firstButton?: boolean | undefined;\r\n    lastButton?: boolean | undefined;\r\n    onChangePage: (page: number) => void;\r\n}) => JSX.Element;\r\n"}}
